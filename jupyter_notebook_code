import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score

# Loading the dataset
training_input = pd.read_csv('training_set_features.csv')
training_output = pd.read_csv('training_set_labels.csv')
training_input.info()
training_output.info()

# Extracting features and target variables
X = training_input.drop(columns=['respondent_id'])
y_xyz = training_output['xyz_vaccine']
y_seasonal = training_output['seasonal_vaccine']
# Identify categorical and numerical columns in the training dataset 
categorical_cols = X.select_dtypes(include=['object']).columns
numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns

# Preprocessing pipelines for numerical and categorical data
numerical_pipeline = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())
])

categorical_pipeline = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

# Combine the above preprocessing steps
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_pipeline, numerical_cols),
        ('cat', categorical_pipeline, categorical_cols)
    ]
)

# Define the model
model_xyz = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))
])

model_seasonal = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))
])

# Split the data into training and testing sets
X_train, X_test, y_train_xyz, y_test_xyz, y_train_seasonal, y_test_seasonal = train_test_split(
    X, y_xyz, y_seasonal, test_size=0.2, random_state=42)

# Train the models
model_xyz.fit(X_train, y_train_xyz)
model_seasonal.fit(X_train, y_train_seasonal)

# Predicting the probabilities
y_pred_prob_xyz = model_xyz.predict_proba(X_test)[:, 1]
y_pred_prob_seasonal = model_seasonal.predict_proba(X_test)[:, 1]

# Evaluate the models
roc_auc_xyz = roc_auc_score(y_test_xyz, y_pred_prob_xyz)
roc_auc_seasonal = roc_auc_score(y_test_seasonal, y_pred_prob_seasonal)

print(f'ROC AUC for xyz vaccine: {roc_auc_xyz}')
print(f'ROC AUC for seasonal vaccine: {roc_auc_seasonal}')

# Prepare submission file
test_data = pd.read_csv('test_set_features.csv')
test_X = test_data.drop(columns=['respondent_id'])

# Predict probabilities for the test set
test_pred_prob_xyz = model_xyz.predict_proba(test_X)[:, 1]
test_pred_prob_seasonal = model_seasonal.predict_proba(test_X)[:, 1]

submission = pd.DataFrame({
    'respondent_id': test_data['respondent_id'],
    'xyz_vaccine': test_pred_prob_xyz,
    'seasonal_vaccine': test_pred_prob_seasonal
})

submission.to_csv('submission_1.csv', index=False)
